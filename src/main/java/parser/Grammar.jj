/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(Parser)
package parser;
import java.io.*;
import java.util.*;
import utils.*;

public class Parser
{
  private static final String ERROR_NO_INPUT_FILE = "Requires input file path.";

  private static final String POSSIBLE_ARGS = "Arguments available - <input_file_path> <output_file_name>";

  public static void main(String args []) throws ParseException, IOException
  {
    if (args.length == 0)
    {
      System.out.printf("%s\n", POSSIBLE_ARGS);
      System.err.printf("%s\n", ERROR_NO_INPUT_FILE);
    }
    else
    {
      // final String STRUCTURE = "Enter an expression like \"(S1) (d | d:D) c.operation (S2);\" :\n";
      String inputFilePath = args [0];
      String outputFilePath = "global_type";
      if (args.length > 1) 
      outputFilePath = args [1];
      System.out.print(inputFilePath);
      BufferedReader objReader = new BufferedReader(new FileReader(inputFilePath));
      Parser parser = new Parser(objReader);
      Data d = new Data();
      Validations valid = new Validations();
      boolean endOfFile = false;
      while (!endOfFile)
      {
        try
        {
          switch (parser.one_line(d))
          {
            case 0 : 
            break;
            case 1 : 
            endOfFile = true;
            break;
            default : 
            break;
          }
        }
        catch (Exception e)
        {
          System.out.println("NOK.");
          System.out.println(e.getMessage());
          break;
        }
        catch (Error e)
        {
          System.out.println("Oops.");
          System.out.println(e.getMessage());
          break;
        }
      }
      valid.validateParsedInput(d, outputFilePath);
    }
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < #NUMBER : [ "0"-"9" ] >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < STRING : (< LETTER >)+ >
| < DIGIT : (< NUMBER >)+ >
| < EMPTYSTATE : "(_)" >
| < STATE :
    "("
    (
      < LETTER > (< DIGIT >)*
    )
    ")" >
| < START : "starts(" < STRING > ")" >
| < METHOD : < STRING > "()" >
| < INTERNALOPERATIONS : "-" < METHOD > >
| < CONTRACTOPERATION : "." < METHOD > >
}

int one_line(Data d) :
{}
{
  action(d) (";")?
  {
    return 0;
  }
| "EOF;"
  {
    return 1;
  }
| "//"
  (
    < STRING >
  | (< DIGIT >)
  )*
  (";")?
  {
    return 2;
  }
}

void action(Data d) :
{
}
{
  deployAction(d)
| normalAction(d)
| endStates(d)
}

void normalAction(Data d) :
{
  Token iState;
  Token contract;
  String part;
}
{
  iState = < STATE > part = participantChoice() contract = < STRING > actionChoice(d, contract, part, iState)
  {
    Automaton a = d.getContractById(contract.image);
    if (a == null) 
    d.addContract(contract.image);
    a = d.getContractById(contract.image);
    a.addState(iState.image);
    a.addParticipantChoice(part);
  }
}

void actionChoice(Data d, Token cId, 
String part, Token iState) :
{
  Token op;
  Token state;
  Automaton a = null;
  Graph g = null;
  Transition t;
}
{
  op = < CONTRACTOPERATION > state = < STATE >
  {
    a = d.getContractById(cId.image);
    if (a == null) 
    d.addContract(cId.image);
    a = d.getContractById(cId.image);
    a.addState(state.image);
    g = d.getGraph();
    g.addEdge(iState.image, state.image, part);
    t = new Transition(iState.image, state.image, op.image, part);
    a.addOperation(t);
    d.addTransitions(t);
  }
| op = < INTERNALOPERATIONS > state = < STATE >
  {
    a = d.getContractById(cId.image);
    if (a == null) 
    d.addContract(cId.image);
    a = d.getContractById(cId.image);
    a.addState(state.image);
    g = d.getGraph();
    g.addEdge(iState.image, state.image, part);
    t = new Transition(iState.image, state.image, op.image, part);
    a.addInternalOperation(t);
    d.addTransitions(t);
  }
}

String participantChoice() :
{
  Token par;
  String bothPart;
}
{
  "(" par = < STRING > bothPart = bothParticipantChoice()
  {
    return par.image + bothPart;
  }
| bothPart = eitherParticipantChoice()
  {
    return bothPart;
  }
}

String bothParticipantChoice() :
{
  Token par;
  Token role = null;
  String newBothPart;
}
{
  "|" par = < STRING > ":" role = < STRING > ")"
  {
    return "|" + par.image + ":" + role.image;
  }
| newBothPart = newParticipantBoth() "|" par = < STRING > ")"
  {
    return newBothPart + "|" + par;
  }
}

String newParticipantBoth() :
{
  Token role;
}
{
  ":" role = < STRING >
  {
    return ":" + role;
  }
}

// For either one
String eitherParticipantChoice() :
{
  Token par;
  Token role = null;
}
{
  par = < STRING > (":" role = < STRING >)?
  {
    String result = par.image;
    if (role != null) 
    result = result + ":" + role;
    return result;
  }
}

void deployAction(Data d) :
{
  Token method = null;
  Token eState = null;
  Token par;
  Token role;
  Transition t;
}
{
  < EMPTYSTATE > par = < STRING > ":" role = < STRING > 
  method = < START > eState = < STATE >
  {
    Automaton a = d.getContractById(method.image);
    if (a == null) 
    d.addContract(method.image);
    a = d.getContractById(method.image);
    d.addRegisteredContract(method.image);
    a.addState(eState.image);
    a.setInitialState(eState.image);
    a.addParticipant(par.image);
    a.addRoleParticipant(role.image, par.image);
    a.addRole(role.image);
    t = new Transition("(_)", eState.image, method.image, par.image + ":" + role.image);
    a.addOperation(t);
    d.addTransitions(t);
  }
}

void endStates(Data d) :
{
  Token iState;
  Token cID;
  Token eState = null;
  List < String > stateList = new ArrayList < String > ();
}
{
  "ENDSTATES -" cID = < STRING > "-" "{" iState = < STATE >
  (
    "," 
    eState = < STATE >
    {
      stateList.add(eState.image);
    }
  )*
  "}"
  {
    String cId = UtilsParser.getContractIdFromMethod(cID.image);
    Automaton a = d.getContractById(cId);
    a.addEndState(iState.image);
    a.addEndStates(stateList);
  }
}
