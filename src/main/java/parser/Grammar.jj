/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
 static = false;
}

PARSER_BEGIN(Parser)
package parser;
import data.*;
import java.util.Hashtable;
import java.util.HashSet;
import java.util.Set;
import validations.*;
import exceptions.CustomException;

public class Parser
{}

PARSER_END(Parser)

<*> SKIP :
{
	< " " | "\t" | "\r" | "\n" | "\r\n" >
	|
	<"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
	|
	<"/*"(~["/"])*  "*""/" >
}

TOKEN :
{
 	< UNDERSCORE : "_" >
 	|
 	< PLUS : "+" >
 	|
 	< COLON : ":" >
	|
 	< NUMBER : [ "0"-"9" ] >
	|
	< LPAR : "(" >
  	|
  	< RPAR : ")" >
  	|
  	< LCURLB : "{" >
  	|
  	< RCURLB : "}" >
  	|
  	< NORMALCALL : ">" >
  	|
  	< EXTERNALCALL : "<" >
 	|
 	< MOREPART : "|" >
	|
	< STARTLABEL : "starts" >
	|
	< OPERATIONTYPE : ("-" | ".") >
	|
	< STRING : (["A"-"Z","a"-"z"])+(["A"-"Z","a"-"z","0"-"9"])* >
}

int Start(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException:
{}
{
  	DeployTransition(auto, checks)
	{
	  	return 0;
	}
 	| 
 	NormalTransition(auto, checks)
	{
   	 	return 0;
   	}
   	|
   	<EOF>
   	{
   	 	return 1;
   	}
}

void DeployTransition(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException:
{
  	Token iS;
 	Token eS;
 	String p;
 	Transition t;
 	Token isES = null;
 	Boolean rES = false;
}
{
  	iS = < UNDERSCORE > p = ParticipantExtra(checks) <NORMALCALL> t = DeployAction(auto) eS = < STRING > (isES = < PLUS >)?
	{
	 	Automaton a = auto.get(t.getId());
	 	if (a == null) 
    		a = auto.put(t.getId(), new Automaton(t.getId()));
    	a = auto.get(t.getId());

		// transition
    	t.setFromS(iS.image);
    	if(isES != null)
    		rES = true;
    	t.setToS(eS.image);
    	t.addParticipant(p);
    	t.setExternalCall(false);

		// automaton
		a.addBothStates(iS.image, eS.image, rES);
    	a.addTransition(t);
    	a.addRoleParticipant(p);

    	// graph
    	checks.getGraph().addEdge(iS.image, eS.image, p);
    	// checks
    	checks.getContractsRegistered().add(t.getId());
	}
}

void NormalTransition(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException:
{ 
	Token iS;
 	Token eS;
 	String p;
 	Transition t;
 	Token isES = null;
 	Boolean eC = false;
 	Boolean rES = false;
}
{
	iS = < STRING > p = ParticipantExtra(checks) eC = ExternalCall() t = NormalAction(auto) eS = < STRING > (isES = < PLUS >)?
	{
	 	Automaton a = auto.get(t.getId());
	 	if (a == null) 
    		a = auto.put(t.getId(), new Automaton(t.getId()));
    	a = auto.get(t.getId());

		// transition
    	t.setFromS(iS.image);
    	if(isES != null)
    		rES = true;
    	t.setToS(eS.image);
    	t.addParticipant(p);
    	t.setExternalCall(eC);

    	// external call
    	if(eC)
    	{
    	 	String internalS = "I" + checks.getCounter();
    		t.setToS(internalS);
    		Transition okT = new Transition(".",internalS, eS.image, "OK", t.getNewParts(), t.getExistantParts(), t.getInput(), t.getPreCondition(), t.getPostCondition(), false);
			Transition nokT = new Transition(".",internalS, iS.image, "NOK", t.getNewParts(), t.getExistantParts(), t.getInput(), t.getPreCondition(), t.getPostCondition(), false);
			a.addTransition(okT);
			a.addTransition(nokT);
			a.getStates().add(internalS);
    		checks.setCounter(checks.getCounter() + 1);
		}

		// automaton
		a.addBothStates(iS.image, eS.image, rES);
    	a.addTransition(t);
    	a.addRoleParticipant(p);

		// graph
    	checks.getGraph().addEdge(iS.image, eS.image, p);
	}
}

boolean ExternalCall():
{
}
{
	<NORMALCALL> { return false; }
	|
	<EXTERNALCALL> { return true; }	  
}

String Participant(ValidationChecks checks) throws CustomException:
{
	Token p1;
	Token p2 = null;
	Token p3 = null;
}
{
 	p1 = < STRING > (p2 = <COLON> p3 = <STRING>)?
 	{
		if(p2 == null)
		{
		 	checks.getParticipantsAll().add(p1.image);
	 		return p1.image;
	 	}
		else
		{
		 	checks.addParticipantsRegistered(p1.image);
			return p1.image.concat(p2.image).concat(p3.image);
		}
	}
}

String ParticipantExtra(ValidationChecks checks) throws CustomException:
{
  	String p1;
  	String p2;
  	Token join;
  	Set < String > parts = new HashSet < String > ();
}
{
	p1 = Participant(checks) (join = <MOREPART> p2 = Participant(checks) { parts.add(join.image.concat(p2)); })*
	{
		String concat = String.join("", parts);
		return p1.concat(concat);
	}
}


Transition DeployAction(Hashtable<String, Automaton> auto):
{
	Token c;
}
{
  	< STARTLABEL > < LPAR > c = < STRING > < RPAR >
	{
	  	return new Transition(c.image, "starts", ".");
	}
}

Transition NormalAction(Hashtable<String, Automaton> auto):
{
	Token c;
 	Token aType;
 	Token aLabel;
}
{
	c = < STRING > aType = < OPERATIONTYPE > aLabel = < STRING > < LPAR > < RPAR >
	{
		return new Transition(c.image, aLabel.image, aType.image);
	}
}