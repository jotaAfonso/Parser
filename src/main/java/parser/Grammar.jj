/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
 static = false;
}

PARSER_BEGIN(Parser)
package parser;
import data.*;
import java.util.*;
import validations.*;
import exceptions.*;
import utils.*;
import types.*;
import ast.*;

public class Parser
{}

PARSER_END(Parser)

<*> SKIP :
{
	< " " | "\t" | "\r" | "\n" | "\r\n" >
	|
	<"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
	|
	<"/*"(~["/"])*  "*""/" >
}

TOKEN :
{
  	< INT: "int" >
  	|
  	< BOOL: "bool" >
 	|
 	< PTYPE: "PType">
 	|
 	< STRING: "string"> 
}

TOKEN :
{
  	< PLUS : "+" >
  	| < MINUS : "-">
  	| < TIMES : "*">
  	| < DIV : "/">
	| < UNDERSCORE : "_" >
 	| < COLON : ":" >
 	| < COMMA: "," >
	| < TRUE : "true" >
  	| < FALSE : "false" > 
	| < LBRACKET : "{" >
	| < RBRACKET : "}" >
	| < LPAR : "(" >
  	| < RPAR : ")" >
 	| < OR : "||" >
  	| < AND : "&&" >
  	| < EQ : "==" >
	| < NEQ : "!=" >
	| < LEQ : "<=" >
	| < GEQ: ">=" >
	| < LT : "<" >
	| < GT : ">" >
	| < NOT: "!" >
	| < SEQ: ";" >
  	| < VAR : "var" >
  	| < VARASS : ":=" >
 	| < QUOTATIONMARK : ["\""]>
 	| < MOREPART : "|" > 
  	| < STARTLABEL : "starts" >
	| < DOT : ["."]  >
	| < Num: (["0"-"9"]) + >
	| < CID : "P"(["A"-"Z","0"-"9"])* >
	| < ID : ["A"-"Z","a"-"z"](["A"-"Z","a"-"z","0"-"9"])* >
	| < EXISTS: "∃" >
	| < FORALL: "∀" >
}

int Start(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException, TypingException :
{}
{
  	DeployTransition(auto,checks)
	{
	  	return 0;
	}
 	| 
 	NormalTransition(auto, checks)
	{
   	 	return 0;
   	}
   	|
   	<EOF>
   	{
   	 	return 1;
   	}
}

void DeployTransition(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException, TypingException :
{
  	Token iS, eS, isES = null;
 	String p;
 	Transition t;
 	Boolean eC = false;
 	ASTNode postC = null;
}
{
  	iS = < UNDERSCORE > <LBRACKET> <RBRACKET>
  		p = Participant() eC = ExternalCall() t = DeployAction(auto)
  			<LBRACKET> (postC = Assertion())? <RBRACKET>
  				eS = < ID > (isES = < PLUS >)?
	{
    	GrammarLogic.addTransition(auto, checks, t, iS, eS, isES, eC, null, postC, p, true);
	}
}

void NormalTransition(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException, TypingException:
{ 
	Token iS, eS, isES = null;
 	String p;
 	Transition t;
 	Boolean eC = false;
 	ASTNode postC = null, preC = null;
}
{
	iS = < ID > <LBRACKET> (preC = Assertion())? <RBRACKET>
		p = ParticipantExtra() eC = ExternalCall() t = NormalAction(auto)
			<LBRACKET> (postC = Assertion())? <RBRACKET>
				eS = < ID > (isES = < PLUS >)?
	{
	 	GrammarLogic.addTransition(auto, checks, t, iS, eS, isES, eC, preC, postC, p, false);
	}
}

boolean ExternalCall():
{
}
{
	<GT> { return false; }
	|
	<LT> { return true; }	  
}

String Participant():
{
	Token p1, p2 = null, p3 = null;
}
{
 	p1 = < ID > (p2 = <COLON> p3 = <CID>)?
 	{
		if(p2 == null)
	 		return p1.image;
		else
			return p1.image.concat(p2.image).concat(p3.image);
	}
}

String ParticipantExtra():
{
  	String p1, p2;
  	Token join;
  	Set < String > parts = new HashSet < String > ();
}
{
	p1 = Participant() (join = <MOREPART> p2 = Participant() { parts.add(join.image.concat(p2)); })*
	{
		return p1.concat(String.join("", parts));
	}
}


Transition DeployAction(Hashtable<String, Automaton> auto):
{
	Token c;
	List<Param> param = null;
}
{
  	< STARTLABEL > < LPAR > c = < ID > (<COMMA> param = ParamList())? < RPAR >
	{
	  	return new Transition(c.image, "starts", ".", param);
	}
}

Transition NormalAction(Hashtable<String, Automaton> auto):
{
	Token c, aLabel;
 	String aType;
	List<Param> param;
}
{
	c = < ID > aType = OperationType() aLabel = < ID > < LPAR > param = ParamList() < RPAR >
	{
	  	return new Transition(c.image, aLabel.image, aType, param);
	}
}


String OperationType():
{
  	Token aType;
}
{
	(
	  aType = <MINUS> 
	|
	aType = <DOT>) { return aType.image; }	  
}

//	ASSERTIONS - PARAMETERS
List<Param> ParamList():
{
  	List<Param> l = new LinkedList<Param>();
  	Token x;
  	IType t;
}
{
  	// t = Type or ID -> check if its a state if it is not gives error
	[x=<ID> <COLON> t=Type() { l.add(new Param(x.image,t));}
	
	( <COMMA> x=<ID> <COLON> t=Type() {l.add(new Param(x.image,t));} )*]
	
	{ return l; }
}

IType Type():
{
  	IType t;
}
{	
  	(
    <INT> { t = IntType.singleton; }
    | 
    <BOOL> { t = BoolType.singleton; }
	|
    <STRING> { t = StringType.singleton; }
    |
    <CID> <COLON> <PTYPE>  { t = ParticipantType.singleton; }
    )
	{ return t; }
}

// Assertion
ASTNode Assertion():
{
	ASTNode e;
}
{
	e = Assign()
	 { return e; }
}

ASTNode Assign():
{
  	ASTNode e1,e2;
}
{
  e1 = Logical()
  [
	<VARASS> e2 = Assign()
		{
			e1 = new ASTAssign(e1, e2);
	 	}
  ] 
  { return e1; }
}

ASTNode Logical():
{
  	ASTNode e1,e2;
}
{
  e1 = BooleanExp()
  (<OR> e2 = BooleanExp() { e1 = new ASTOr(e1,e2); }
  |<AND> e2 = BooleanExp() { e1 = new ASTAnd(e1,e2); }  
  )*
  { return e1; }
}

ASTNode BooleanExp():
{
  	ASTNode e1, e2;
}
{
	e1 = Exp()
 	 (<EQ> e2 = Exp() { e1 = new ASTEq(e1,e2); }
 	 |<NEQ> e2 = Exp() { e1 = new ASTNeq(e1,e2); }
 	 |<LT> e2 = Exp() { e1 = new ASTLt(e1,e2); }
 	 |<GT> e2 = Exp() { e1 = new ASTGt(e1,e2); }
 	 |<LEQ> e2 = Exp() { e1 = new ASTLeq(e1,e2); }
 	 |<GEQ> e2 = Exp() { e1 = new ASTGeq(e1,e2); })*
 	 { return e1; } 
}

ASTNode ExistsAssertion():
{
  ASTNode e1;
  Token e2;
}
{
	e1 = ForAllAssertion()
	  (<EXISTS> e2 = <CID> { e1 = new ASTExists(e1,new ASTId(e2.image.substring(1))); }
	  )*
	  { return e1; }
  
}

ASTNode ForAllAssertion():
{
  ASTNode e1;
  Token e2;
}
{
	e1 = Logical()
	  (<FORALL> e2 = <CID> { e1 = new ASTForAll(e1,new ASTId(e2.image.substring(1))); }
	  )*
	  { return e1; }
  
}

ASTNode Exp() :
{ ASTNode e1, e2; }
{
   e1 = Unary() 
     ( <PLUS> e2 = Unary() { e1 = new ASTAdd(e1,e2); }
     | <MINUS> e2 = Unary() { e1 = new ASTSub(e1,e2); }
     | <TIMES> e2 = Unary() { e1 = new ASTMul(e1,e2); }
     | <DIV> e2 = Unary() { e1 = new ASTDiv(e1,e2); }
     )*
     { return e1; }
}

/*
	Atomic and negation
*/
ASTNode Unary() :
{
 	ASTNode e1;
}
{
     e1 = Fact() { return e1; }
     | <MINUS> e1 = Unary() { return new ASTSub(new ASTNum(0),e1); }
	 | <NOT> e1 = Unary() { return new ASTNot(e1); }
}

ASTNode Fact() :
{
 	Token x;
 	ASTNode e1;
 	IType t;}
{
 	x = <Num> { return new ASTNum(Integer.parseInt(x.image)); }
	// exclusive to one word
	//TODO: increase to whatever
	|
	<QUOTATIONMARK> x = <ID> <QUOTATIONMARK > { return new ASTString(x.image); }
	| <LPAR> e1 = Assign() <RPAR> { return e1; }
	| < TRUE > { return new ASTBool(true); }
	| < FALSE > { return new ASTBool(false); }
	| < VAR > t = Type() x = < ID > { return new ASTVar(x.image, t); }
	| x = < ID > { return new ASTId(x.image); } 
}