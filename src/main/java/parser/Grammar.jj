/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
 static = false;
}

PARSER_BEGIN(Parser)
package parser;
import data.*;
import java.util.*;
import validations.*;
import exceptions.*;
import utils.*;
import types.*;
import ast.*;

public class Parser
{}

PARSER_END(Parser)

<*> SKIP :
{
	< " " | "\t" | "\r" | "\n" | "\r\n" >
	| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
	| <"/*"(~["/"])*  "*""/" >
}

// Types
TOKEN :
{
  	< INT: "int" >
  	| < BOOL: "bool" >
 	| < STRING: "string">
 	| < SET: "set">
 	// | < PTYPE: "PType">
}

TOKEN :
{
  	< PLUS : "+" >
  	| < MINUS : "-">
  	| < TIMES : "*">
  	| < DIV : "/">
}

// Logical Operators :
TOKEN :
{
  	< AND : "AND"  >
  	| < NOT: "NOT" >
	| < OR : "OR" >
}

//Comparison operators
TOKEN :
{
  	< EQ : "==" >
	| < NEQ : "!=" | "<>" >
	| < LEQ : "<=" >
	| < GEQ: ">=" >
	| < LT : "<" >
	| < GT : ">" >
}

// Boolean Values
TOKEN :
{
  	< TRUE : "true" | "TRUE" >
  	| < FALSE : "false" | "FALSE" > 
}

// Constants
TOKEN :
{
	< STARTLABEL : "starts" | "STARTS" | "deploy" | "DEPLOY" >
	| < CONTAINS : "in" > 
}

// Brackets
TOKEN :
{
  	< LBRACKET : "{" >
	| < RBRACKET : "}" >
	| < LPAR : "(" >
  	| < RPAR : ")" >
  	| < SLPAR : "[" >
  	| < SRPAR : "]" >
}

TOKEN :
{
	< UNDERSCORE : "_" >
 	| < COLON : ":" >
 	| < COMMA: "," >
  	| < VAR : "var" >
  	| < VARASS : ":=" >
 	| < MOREPART : "|" > 
	| < DOT : ["."]  >
}

// Quantifiers
TOKEN :
{
  	<EXISTS: "∃" | "exists" | "EXISTS" >
	| <FORALL: "∀" | "forall" | "FORALL" >
}

TOKEN :
{	
  	< NUMBER : (["0"-"9"])+ >
 	| < #CHAR : ["A"-"Z","a"-"z"] >
	| < #ID : (["A"-"Z","a"-"z"])+ >
	| < IDWN : <CHAR> (<ID> | <NUMBER>)* >
}

TOKEN :
{
  < STRING_LITERAL : ["\""]  (~["\n","\r"])*  ["\""]>
}

int Start(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException, TypingException :
{}
{
  	DeployTransition(auto,checks) {	return 0; }
 	| NormalTransition(auto, checks) { return 0; }
   	| <EOF>	{ return 1;	}
}

void DeployTransition(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException, TypingException :
{
  	Token iS, eS, isES = null;
 	String p;
 	Transition t;
 	Boolean eC = false;
 	ASTNode postC = null;
}
{
  	iS = < UNDERSCORE > <LBRACKET> <RBRACKET>
  		p = Participant() eC = ExternalCall() t = DeployAction(auto)
  			<LBRACKET> (postC = Assertion())? <RBRACKET>
  				eS = < IDWN > (isES = < PLUS >)?
	{
    	GrammarLogic.addTransition(auto, checks, t, iS, eS, isES, eC, null, postC, p, true);
	}
}

void NormalTransition(Hashtable<String, Automaton> auto, ValidationChecks checks) throws CustomException, TypingException:
{ 
	Token iS, eS, isES = null;
 	String p;
 	Transition t;
 	Boolean eC = false;
 	ASTNode postC = null, preC = null;
}
{
	iS = < IDWN > <LBRACKET> (preC = Assertion())? <RBRACKET>
		p = ParticipantExtra() eC = ExternalCall() t = NormalAction(auto)
			<LBRACKET> (postC = Assertion())? <RBRACKET>
				eS = < IDWN > (isES = < PLUS >)?
	{
	 	GrammarLogic.addTransition(auto, checks, t, iS, eS, isES, eC, preC, postC, p, false);
	}
}

boolean ExternalCall():
{}
{
	<GT> { return false; }
	| <LT> { return true; }	  
}

String Participant():
{
	Token p1, p2 = null, p3 = null;
}
{
 	p1 = < IDWN > (p2 = <COLON> p3 = <IDWN>)?
 	{
		if(p2 == null) { return p1.image; }
		else { return p1.image.concat(p2.image).concat(p3.image); }
	}
}

String ParticipantExtra():
{
  	String p1, p2;
  	Token join;
  	Set < String > parts = new HashSet < String > ();
}
{
	p1 = Participant() (join = <MOREPART> p2 = Participant() { parts.add(join.image.concat(p2)); })*
	{ return p1.concat(String.join("", parts)); }
}


Transition DeployAction(Hashtable<String, Automaton> auto):
{
	Token c;
	List<Param> param = null;
}
{
  	< STARTLABEL > < LPAR > c = < IDWN > (<COMMA> param = ParamList())? < RPAR >
	{ return new Transition(c.image, "starts", ".", param); }
}

Transition NormalAction(Hashtable<String, Automaton> auto):
{
	Token c, aLabel;
 	String aType;
	List<Param> param;
}
{
	c = < IDWN > aType = OperationType() aLabel = < IDWN > < LPAR > param = ParamList() < RPAR >
	{ return new Transition(c.image, aLabel.image, aType, param); }
}


String OperationType():
{
  	Token aType;
}
{
	( aType = <MINUS>
	| aType = <DOT>)
	{ return aType.image; }	  
}

//	ASSERTIONS - PARAMETERS
List<Param> ParamList():
{
  	List<Param> l = new LinkedList<Param>();
  	Token x;
  	IType t;
}
{
  	// t = Type or ID -> check if its a state if it is not gives error
	[x=<IDWN> <COLON> t=Type() { l.add(new Param(x.image, t));}
	( <COMMA> x=<IDWN> <COLON> t=Type() {l.add(new Param(x.image, t));} )*]
	{ return l; }
}

IType Type():
{
  	IType t;
  	Token role;
}
{	
  	( <INT> { t = IntType.singleton; }
    | <BOOL> { t = BoolType.singleton; }
	| <STRING> { t = StringType.singleton; }
    | role = <IDWN> { t = new ParticipantType(role.image); }
    | <SET> { t = SetType.singleton; })
	{ return t; }
}

ASTNode Assertion():
{
	ASTNode n;
}
{
	n = LogicalExp()
	{ return n; }
}

ASTNode LogicalExp():
{
  	ASTNode n1, n2;
}
{
  	( n1 = BooleanExp()
 	| <OR> <LPAR> n1 = LogicalExp() <COMMA> n2 = LogicalExp() <RPAR> { n1 = new ASTOr(n1, n2); }
  	| <AND> <LPAR> n1 = LogicalExp() <COMMA> n2 = LogicalExp() <RPAR> { n1 = new ASTAnd(n1, n2); }
  	| <NOT> n1 = LogicalExp() { n1 = new ASTNot(n1); }
 	){ return n1; }
}

ASTNode BooleanExp():
{
  	ASTNode n1, n2, n3;
}
{
	( n1 = ArithmeticExp()
	 	( <EQ> n2 = ArithmeticExp() { n1 = new ASTEq(n1, n2); }
	 	| <NEQ> n2 = ArithmeticExp() { n1 = new ASTNeq(n1, n2); }
	 	| <LT> n2 = ArithmeticExp() { n1 = new ASTLt(n1, n2); }
	 	| <GT> n2 = ArithmeticExp() { n1 = new ASTGt(n1, n2); }
	 	| <LEQ> n2 = ArithmeticExp() { n1 = new ASTLeq(n1, n2); }
	 	| <GEQ> n2 = ArithmeticExp() { n1 = new ASTGeq(n1, n2); }
	 	| <VARASS> n2 = ArithmeticExp() { n1 = new ASTAssign(n1, n2); }
		| <CONTAINS> n2 = ArithmeticExp() { return new ASTContains(n1, n2);})*
	{ return n1; } )
	| <EXISTS> n1 = AtomicExp() n2 = AtomicExp() n3 = LogicalExp() { return new ASTExists(n1, n2, n3);}
	| <FORALL> n1 = AtomicExp() n2 = AtomicExp() n3 = LogicalExp() { return new ASTForAll(n1, n2, n3);}
}

ASTNode ArithmeticExp() :
{ ASTNode n1, n2; }
{
   	n1 = UnaryExp() 
   	( <PLUS> n2 = UnaryExp() { n1 = new ASTAdd(n1, n2); }
   	| <MINUS> n2 = UnaryExp() { n1 = new ASTSub(n1, n2); }
   	| <TIMES> n2 = UnaryExp() { n1 = new ASTMul(n1, n2); }
   	| <DIV> n2 = UnaryExp() { n1 = new ASTDiv(n1, n2); })*
   	{ return n1; }
}

/*
	Atomic and negation
*/
ASTNode UnaryExp() :
{
 	ASTNode n1;
}
{
   	( n1 = AtomicExp() 
	| <MINUS> n1 = UnaryExp() { n1 = new ASTSub(new ASTNum(0), n1); })
	{ return n1; }
}

ASTNode AtomicExp() :
{
	Token t1, t2;
	ASTNode n1;
	IType ty1 = null;
}
{
 	( t1 = <NUMBER> { n1 = new ASTNum(Integer.parseInt(t1.image)); }
	| t1 = <STRING_LITERAL> { n1 = new ASTString(t1.image); }
	| <SLPAR> <SRPAR> { n1 = new ASTSet(); }
	| <LPAR> n1 = ArithmeticExp() <RPAR>
	| < TRUE > { n1 = new ASTBool(true); }
	| < FALSE > { n1 = new ASTBool(false); }
	| (ty1 = Type())? t1 = < IDWN > {
		  if(ty1 == null)
		  	{ n1 = new ASTId(t1.image); }
		  else
		  	{ n1 = new ASTVar(t1.image, ty1); }
	})
	{ return n1; }
	  	
}