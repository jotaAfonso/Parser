/* Generated By:JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
@SuppressWarnings("all")
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INT = 4;
  /** RegularExpression Id. */
  int BOOL = 5;
  /** RegularExpression Id. */
  int STRING = 6;
  /** RegularExpression Id. */
  int SET = 7;
  /** RegularExpression Id. */
  int PLUS = 8;
  /** RegularExpression Id. */
  int MINUS = 9;
  /** RegularExpression Id. */
  int TIMES = 10;
  /** RegularExpression Id. */
  int DIV = 11;
  /** RegularExpression Id. */
  int AND = 12;
  /** RegularExpression Id. */
  int NOT = 13;
  /** RegularExpression Id. */
  int OR = 14;
  /** RegularExpression Id. */
  int EQ = 15;
  /** RegularExpression Id. */
  int NEQ = 16;
  /** RegularExpression Id. */
  int LEQ = 17;
  /** RegularExpression Id. */
  int GEQ = 18;
  /** RegularExpression Id. */
  int LT = 19;
  /** RegularExpression Id. */
  int GT = 20;
  /** RegularExpression Id. */
  int TRUE = 21;
  /** RegularExpression Id. */
  int FALSE = 22;
  /** RegularExpression Id. */
  int STARTLABEL = 23;
  /** RegularExpression Id. */
  int CONTAINS = 24;
  /** RegularExpression Id. */
  int ANY = 25;
  /** RegularExpression Id. */
  int LBRACKET = 26;
  /** RegularExpression Id. */
  int RBRACKET = 27;
  /** RegularExpression Id. */
  int LPAR = 28;
  /** RegularExpression Id. */
  int RPAR = 29;
  /** RegularExpression Id. */
  int SLPAR = 30;
  /** RegularExpression Id. */
  int SRPAR = 31;
  /** RegularExpression Id. */
  int QUOTE = 32;
  /** RegularExpression Id. */
  int UNDERSCORE = 33;
  /** RegularExpression Id. */
  int COLON = 34;
  /** RegularExpression Id. */
  int SEMICOLON = 35;
  /** RegularExpression Id. */
  int COMMA = 36;
  /** RegularExpression Id. */
  int VAR = 37;
  /** RegularExpression Id. */
  int VARASS = 38;
  /** RegularExpression Id. */
  int MOREPART = 39;
  /** RegularExpression Id. */
  int DOT = 40;
  /** RegularExpression Id. */
  int EXISTS = 41;
  /** RegularExpression Id. */
  int FORALL = 42;
  /** RegularExpression Id. */
  int NUMBER = 43;
  /** RegularExpression Id. */
  int CHAR = 44;
  /** RegularExpression Id. */
  int ID = 45;
  /** RegularExpression Id. */
  int IDWN = 46;
  /** RegularExpression Id. */
  int STRING_LITERAL = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<token of kind 1>",
    "<token of kind 2>",
    "<token of kind 3>",
    "\"int\"",
    "\"bool\"",
    "\"string\"",
    "\"set\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<AND>",
    "\"NOT\"",
    "\"OR\"",
    "\"==\"",
    "<NEQ>",
    "\"<=\"",
    "\">=\"",
    "\"<\"",
    "\">\"",
    "<TRUE>",
    "<FALSE>",
    "<STARTLABEL>",
    "\"in\"",
    "<ANY>",
    "\"{\"",
    "\"}\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\"\\\"\"",
    "\"_\"",
    "\":\"",
    "\";\"",
    "\",\"",
    "\"var\"",
    "\":=\"",
    "\"|\"",
    "<DOT>",
    "<EXISTS>",
    "<FORALL>",
    "<NUMBER>",
    "<CHAR>",
    "<ID>",
    "<IDWN>",
    "<STRING_LITERAL>",
  };

}
