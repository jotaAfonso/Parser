/* Generated By:JavaCC: Do not edit this line. AssertionsGrammarConstants.java */
package parser.assertions;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AssertionsGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int TIMES = 7;
  /** RegularExpression Id. */
  int DIV = 8;
  /** RegularExpression Id. */
  int LPAR = 9;
  /** RegularExpression Id. */
  int RPAR = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int FALSE = 12;
  /** RegularExpression Id. */
  int Num = 13;
  /** RegularExpression Id. */
  int PTYPE = 14;
  /** RegularExpression Id. */
  int OR = 15;
  /** RegularExpression Id. */
  int AND = 16;
  /** RegularExpression Id. */
  int EQ = 17;
  /** RegularExpression Id. */
  int NEQ = 18;
  /** RegularExpression Id. */
  int LEQ = 19;
  /** RegularExpression Id. */
  int GEQ = 20;
  /** RegularExpression Id. */
  int LT = 21;
  /** RegularExpression Id. */
  int GT = 22;
  /** RegularExpression Id. */
  int NOT = 23;
  /** RegularExpression Id. */
  int EL = 24;
  /** RegularExpression Id. */
  int DECL = 25;
  /** RegularExpression Id. */
  int IN = 26;
  /** RegularExpression Id. */
  int END = 27;
  /** RegularExpression Id. */
  int ASS = 28;
  /** RegularExpression Id. */
  int SEQ = 29;
  /** RegularExpression Id. */
  int VAR = 30;
  /** RegularExpression Id. */
  int VARASS = 31;
  /** RegularExpression Id. */
  int IF = 32;
  /** RegularExpression Id. */
  int THEN = 33;
  /** RegularExpression Id. */
  int ELSE = 34;
  /** RegularExpression Id. */
  int WHILE = 35;
  /** RegularExpression Id. */
  int DO = 36;
  /** RegularExpression Id. */
  int COLON = 37;
  /** RegularExpression Id. */
  int COMMA = 38;
  /** RegularExpression Id. */
  int FUN = 39;
  /** RegularExpression Id. */
  int ARROW = 40;
  /** RegularExpression Id. */
  int INT = 41;
  /** RegularExpression Id. */
  int BOOL = 42;
  /** RegularExpression Id. */
  int ID = 43;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"(\"",
    "\")\"",
    "\"true\"",
    "\"false\"",
    "<Num>",
    "\"PType\"",
    "\"||\"",
    "\"&&\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\">=\"",
    "\"<\"",
    "\">\"",
    "\"!\"",
    "\";;\"",
    "\"decl\"",
    "\"in\"",
    "\"end\"",
    "\"=\"",
    "\";\"",
    "\"var\"",
    "\":=\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"while\"",
    "\"do\"",
    "\":\"",
    "\",\"",
    "\"fun\"",
    "\"->\"",
    "\"int\"",
    "\"bool\"",
    "<ID>",
  };

}
