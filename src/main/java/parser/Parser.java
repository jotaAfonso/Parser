/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import data.*;
import java.util.Hashtable;
import java.util.HashSet;
import java.util.Set;
import validations.*;
import exceptions.CustomException;

public class Parser implements ParserConstants {

  final public int Start(Hashtable<String, Automaton> auto, ValidationChecks checks) throws ParseException, CustomException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case UNDERSCORE:
      DeployTransition(auto, checks);
                {if (true) return 0;}
      break;
    case STRING:
      NormalTransition(auto, checks);
                {if (true) return 0;}
      break;
    case 0:
      jj_consume_token(0);
                {if (true) return 1;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void DeployTransition(Hashtable<String, Automaton> auto, ValidationChecks checks) throws ParseException, CustomException {
        Token iS;
        Token eS;
        String p;
        Transition t;
        Token isES = null;
        Boolean rES = false;
    iS = jj_consume_token(UNDERSCORE);
    p = ParticipantExtra(checks);
    jj_consume_token(NORMALCALL);
    t = DeployAction(auto);
    eS = jj_consume_token(STRING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      isES = jj_consume_token(PLUS);
      break;
    default:
      jj_la1[1] = jj_gen;
      ;
    }
                Automaton a = auto.get(t.getId());
                if (a == null)
                a = auto.put(t.getId(), new Automaton(t.getId()));
        a = auto.get(t.getId());

                // transition
        t.setFromS(iS.image);
        if(isES != null)
                rES = true;
        t.setToS(eS.image);
        t.addParticipant(p);
        t.setExternalCall(false);

                // automaton
                a.addBothStates(iS.image, eS.image, rES);
        a.addTransition(t);
        a.addRoleParticipant(p);

        // graph
        checks.getGraph().addEdge(iS.image, eS.image, p);
        // checks
        checks.getContractsRegistered().add(t.getId());
  }

  final public void NormalTransition(Hashtable<String, Automaton> auto, ValidationChecks checks) throws ParseException, CustomException {
        Token iS;
        Token eS;
        String p;
        Transition t;
        Token isES = null;
        Boolean eC = false;
        Boolean rES = false;
    iS = jj_consume_token(STRING);
    p = ParticipantExtra(checks);
    eC = ExternalCall();
    t = NormalAction(auto);
    eS = jj_consume_token(STRING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUS:
      isES = jj_consume_token(PLUS);
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
                Automaton a = auto.get(t.getId());
                if (a == null)
                a = auto.put(t.getId(), new Automaton(t.getId()));
        a = auto.get(t.getId());

                // transition
        t.setFromS(iS.image);
        if(isES != null)
                rES = true;
        t.setToS(eS.image);
        t.addParticipant(p);
        t.setExternalCall(eC);

        // external call
        if(eC)
        {
                String internalS = "I" + checks.getCounter();
                t.setToS(internalS);
                Transition okT = new Transition(".",internalS, eS.image, "OK", t.getNewParts(), t.getExistantParts(), t.getInput(), t.getPreCondition(), t.getPostCondition(), false);
                        Transition nokT = new Transition(".",internalS, eS.image, "NOK", t.getNewParts(), t.getExistantParts(), t.getInput(), t.getPreCondition(), t.getPostCondition(), false);
                        a.addTransition(okT);
                        a.addTransition(nokT);
                        a.getStates().add(internalS);
                checks.setCounter(checks.getCounter() + 1);
                }

                // automaton
                a.addBothStates(iS.image, eS.image, rES);
        a.addTransition(t);
        a.addRoleParticipant(p);

                // graph
        checks.getGraph().addEdge(iS.image, eS.image, p);
  }

  final public boolean ExternalCall() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORMALCALL:
      jj_consume_token(NORMALCALL);
                       {if (true) return false;}
      break;
    case EXTERNALCALL:
      jj_consume_token(EXTERNALCALL);
                         {if (true) return true;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String Participant(ValidationChecks checks) throws ParseException, CustomException {
        Token p1;
        Token p2 = null;
        Token p3 = null;
    p1 = jj_consume_token(STRING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      p2 = jj_consume_token(COLON);
      p3 = jj_consume_token(STRING);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
                if(p2 == null)
                {
                        checks.getParticipantsAll().add(p1.image);
                        {if (true) return p1.image;}
                }
                else
                {
                        checks.addParticipantsRegistered(p1.image);
                        {if (true) return p1.image.concat(p2.image).concat(p3.image);}
                }
    throw new Error("Missing return statement in function");
  }

  final public String ParticipantExtra(ValidationChecks checks) throws ParseException, CustomException {
        String p1;
        String p2;
        Token join;
        Set < String > parts = new HashSet < String > ();
    p1 = Participant(checks);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOREPART:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_1;
      }
      join = jj_consume_token(MOREPART);
      p2 = Participant(checks);
                                                                               parts.add(join.image.concat(p2));
    }
                String concat = String.join("", parts);
                {if (true) return p1.concat(concat);}
    throw new Error("Missing return statement in function");
  }

  final public Transition DeployAction(Hashtable<String, Automaton> auto) throws ParseException {
        Token c;
    jj_consume_token(STARTLABEL);
    jj_consume_token(LPAR);
    c = jj_consume_token(STRING);
    jj_consume_token(RPAR);
                {if (true) return new Transition(c.image, "starts", ".");}
    throw new Error("Missing return statement in function");
  }

  final public Transition NormalAction(Hashtable<String, Automaton> auto) throws ParseException {
        Token c;
        Token aType;
        Token aLabel;
    c = jj_consume_token(STRING);
    aType = jj_consume_token(OPERATIONTYPE);
    aLabel = jj_consume_token(STRING);
    jj_consume_token(LPAR);
    jj_consume_token(RPAR);
                {if (true) return new Transition(c.image, aLabel.image, aType.image);}
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[6];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20011,0x20,0x20,0x3000,0x40,0x4000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 6; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[18];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 6; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 18; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

 }
