/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;
import java.io.*;
import java.util.*;

import utils.*;

public class Parser implements ParserConstants {
  public static void main(String args []) throws ParseException, IOException
  {
    final String STRUCTURE = "Enter an expression like \u005c"(S1) (d | d:D) c.operation (S2);\u005c" :\u005cn";

    final String FILE = "t2.txt";

    final String PATH_EXAMPLES = "InputFiles/Examples/simpleMarketPlace.txt";

    final String PATH_SUCCESS = "InputFiles/SuccessInput" + FILE;

    final String PATH_ERROR = "InputFiles/ErrorInput/" + FILE;
    BufferedReader objReader = new BufferedReader(new FileReader(PATH_EXAMPLES));
    Parser parser = new Parser(objReader);
    Automaton a = new Automaton();
    Validations valid = new Validations();
    boolean endOfFile = false;
    while (!endOfFile)
    {
      try
      {
        switch (parser.one_line(a))
        {
          case 0 :
          break;
          case 1 :
          endOfFile = true;
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        break;
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
    valid.validateParsedInput(a);
  }

  final public int one_line(Automaton a) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTYSTATE:
    case STATE:
    case 22:
      action(a);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        jj_consume_token(15);
        break;
      default:
        jj_la1[0] = jj_gen;
        ;
      }
    {if (true) return 0;}
      break;
    case 16:
      jj_consume_token(16);
    {if (true) return 1;}
      break;
    case 17:
      jj_consume_token(17);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
        case DIGIT:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_1;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case STRING:
          jj_consume_token(STRING);
          break;
        case DIGIT:
          jj_consume_token(DIGIT);
          break;
        default:
          jj_la1[2] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 15:
        jj_consume_token(15);
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
    {if (true) return 2;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void action(Automaton a) throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EMPTYSTATE:
      deployAction(a);
      break;
    case STATE:
      normalAction(a);
      break;
    case 22:
      endStates(a);
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void normalAction(Automaton a) throws ParseException {
  Token iState;
  Token contract;
  String part;
    iState = jj_consume_token(STATE);
    part = participantChoice(a);
    contract = jj_consume_token(STRING);
    actionChoice(a,contract);
    Contract c = a.getContractById(contract.image);
        if(c == null)
        a.addContract(contract.image);
    c = a.getContractById(contract.image);
    c.addState(iState.image);
    c.addParticipantChoice(part);
  }

  final public void actionChoice(Automaton a, Token cId) throws ParseException {
  Token op;
  Token state;
  Contract c = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONTRACTOPERATION:
      op = jj_consume_token(CONTRACTOPERATION);
      state = jj_consume_token(STATE);
    c = a.getContractById(cId.image);
    if(c == null)
        a.addContract(cId.image);
    c = a.getContractById(cId.image);
    c.addOperation(op.image);
    c.addState(state.image);
      break;
    case INTERNALOPERATIONS:
      op = jj_consume_token(INTERNALOPERATIONS);
      state = jj_consume_token(STATE);
    c = a.getContractById(cId.image);
    if(c == null)
        a.addContract(cId.image);
    c = a.getContractById(cId.image);
    c.addInternalOperation(op.image);
    c.addState(state.image);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String participantChoice(Automaton a) throws ParseException {
  Token par;
  String bothPart;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 18:
      jj_consume_token(18);
      par = jj_consume_token(STRING);
      bothPart = bothParticipantChoice();
    {if (true) return par.image + bothPart;}
      break;
    case STRING:
      bothPart = eitherParticipantChoice();
    {if (true) return bothPart;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String bothParticipantChoice() throws ParseException {
  Token par;
  Token role = null;
  String newBothPart;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 19:
      jj_consume_token(19);
      par = jj_consume_token(STRING);
      jj_consume_token(20);
      role = jj_consume_token(STRING);
      jj_consume_token(21);
    {if (true) return "|" + par.image + ":" + role.image;}
      break;
    case 20:
      newBothPart = newParticipantBoth();
      jj_consume_token(19);
      par = jj_consume_token(STRING);
      jj_consume_token(21);
    {if (true) return newBothPart + "|" + par;}
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public String newParticipantBoth() throws ParseException {
  Token role;
    jj_consume_token(20);
    role = jj_consume_token(STRING);
    {if (true) return ":" + role;}
    throw new Error("Missing return statement in function");
  }

// For either one
  final public String eitherParticipantChoice() throws ParseException {
  Token par;
  Token role = null;
    par = jj_consume_token(STRING);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 20:
      jj_consume_token(20);
      role = jj_consume_token(STRING);
      break;
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    String result = par.image;
    if(role != null)
      result = result + ":" + role;
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void deployAction(Automaton a) throws ParseException {
  Token method = null;
  Token eState = null;
  Token par;
  Token role;
    jj_consume_token(EMPTYSTATE);
    par = jj_consume_token(STRING);
    jj_consume_token(20);
    role = jj_consume_token(STRING);
    method = jj_consume_token(START);
    eState = jj_consume_token(STATE);
    Contract c = a.getContractById(method.image);
    if(c == null)
        a.addContract(method.image);
    c = a.getContractById(method.image);
    a.addRegisteredContract(method.image);
    c.addState(eState.image);
    c.setInitialState(eState.image);

    c.addParticipant(par.image);
    c.addRegisteredParticipant(par.image, role.image);
    c.addRole(role.image);
  }

  final public void endStates(Automaton a) throws ParseException {
  Token iState;
  Token method;
  Token eState = null;
  List < String > stateList = new ArrayList < String > ();
    jj_consume_token(22);
    method = jj_consume_token(STRING);
    jj_consume_token(23);
    jj_consume_token(24);
    iState = jj_consume_token(STATE);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_2;
      }
      jj_consume_token(25);
      eState = jj_consume_token(STATE);
      stateList.add(eState.image);
    }
    jj_consume_token(26);
    String cId = UtilsParser.getContractIdFromMethod(method.image);
    Contract c = a.getContractById(cId);
        c.addEndState(iState.image);
    c.addEndStates(stateList);
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[11];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x8000,0x180,0x180,0x8000,0x430600,0x400600,0x6000,0x40080,0x180000,0x100000,0x2000000,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 11; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[27];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 11; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 27; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
