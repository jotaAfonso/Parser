/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
}

PARSER_BEGIN(Parser)
package parserPackage;
import java.io.*;
import java.util.*;
import UtilsPackage.*;

public class Parser
{
  public static void main(String args []) throws ParseException, IOException
  {
    final String STRUCTURE = "Enter an expression like \"(S1) (d | d:D) c.operation (S2);\" :\n";

    final String FILE = "t2.txt";

    final String PATH_EXAMPLES = "InputFiles/Examples/simpleMarketPlace.txt";

    final String PATH_SUCCESS = "InputFiles/SuccessInput" + FILE;

    final String PATH_ERROR = "InputFiles/ErrorInput/" + FILE;
    BufferedReader objReader = new BufferedReader(new FileReader(PATH_EXAMPLES));
    Parser parser = new Parser(objReader);
    Automaton a = new Automaton();
    Validations valid = new Validations();
    boolean endOfFile = false;
    while (!endOfFile)
    {
      try
      {
        switch (parser.one_line(a))
        {
          case 0 : 
          break;
          case 1 : 
          endOfFile = true;
          break;
          default : 
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        break;
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
    valid.validateParsedInput(a);
  }
}

PARSER_END(Parser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN :
{
  < #NUMBER : [ "0"-"9" ] >
| < #LETTER : [ "a"-"z", "A"-"Z" ] >
| < STRING : (< LETTER >)+ >
| < DIGIT : (< NUMBER >)+ >
| < EMPTYSTATE : "(_)" >
| < STATE :
    "("
    (
      < LETTER > (< DIGIT >)*
    )
    ")" >
| < START : "starts(" < STRING > ")" >
| < METHOD : < STRING > "()" >
| < INTERNALOPERATIONS : "-" < METHOD > >
| < CONTRACTOPERATION : "." < METHOD > >
}

int one_line(Automaton a) :
{}
{
  action(a) (";")?
  {
    return 0;
  }
| "EOF;"
  {
    return 1;
  }
| "//"
  (
    < STRING >
  | (< DIGIT >)
  )*
  (";")?
  {
    return 2;
  }
}

void action(Automaton a) :
{
}
{
  deployAction(a)
| normalAction(a)
| endStates(a)
}

void normalAction(Automaton a):
{
  Token iState;
  Token contract;
  String part;
}
{
  iState = < STATE >  part = participantChoice(a) contract = <STRING> actionChoice(a,contract)
  {
    Contract c = a.getContractById(contract.image);
	if(c == null)
    	a.addContract(contract.image);
    c = a.getContractById(contract.image);
    c.addState(iState.image);
    c.addParticipantChoice(part);
  }
}

void actionChoice(Automaton a, Token cId) :
{
  Token op;
  Token state;
  Contract c = null;
}
{
  op = < CONTRACTOPERATION > state = < STATE >
  {
    c = a.getContractById(cId.image);
    if(c == null)
    	a.addContract(cId.image);
    c = a.getContractById(cId.image);
    c.addOperation(op.image);
    c.addState(state.image);
  }
| op = < INTERNALOPERATIONS > state = < STATE >
  {
    c = a.getContractById(cId.image);
    if(c == null)
    	a.addContract(cId.image);
    c = a.getContractById(cId.image);
    c.addInternalOperation(op.image);
    c.addState(state.image);
  }
}

String participantChoice(Automaton a) :
{
  Token par;
  String bothPart;
}
{
  "(" par = < STRING > bothPart = bothParticipantChoice()
  {
    return par.image + bothPart;
  }
| bothPart = eitherParticipantChoice()
  {
    return bothPart;
  }
}

String bothParticipantChoice() :
{
  Token par;
  Token role = null;
  String newBothPart;
 }
{
  "|" par = < STRING > ":" role = < STRING > ")"
  {
    return "|" + par.image + ":" + role.image;
  }
| newBothPart = newParticipantBoth() "|" par = < STRING > ")"
  {
    return newBothPart + "|" + par;
  }
}

String newParticipantBoth() :
{
  Token role;
}
{
  ":" role = < STRING >
  {
    return ":" + role;
  }
}

// For either one
String eitherParticipantChoice() :
{
  Token par;
  Token role = null;
}
{
  par = < STRING > (":" role = < STRING >)?
  {
    String result = par.image;
    if(role != null)
      result = result + ":" + role;
    return result;
  }
}

void deployAction(Automaton a):
{
  Token method = null;
  Token eState = null;
  Token par;
  Token role;
}
{
    < EMPTYSTATE > par = < STRING > ":" role = < STRING >
  	method = < START > eState = < STATE >
 {
    Contract c = a.getContractById(method.image);
    if(c == null)
    	a.addContract(method.image);
    c = a.getContractById(method.image);
    a.addRegisteredContract(method.image);
    c.addState(eState.image);
    c.setInitialState(eState.image);

    c.addParticipant(par.image);
    c.addRegisteredParticipant(par.image, role.image);
    c.addRole(role.image);
  }
}

void endStates(Automaton a):
{
  Token iState;
  Token cID;
  Token eState = null;
  List < String > stateList = new ArrayList < String > ();
}
{
	"ENDSTATES -" cID = < STRING > "-" "{" iState = < STATE >
  (
    "," 
    eState = < STATE >
    {
      stateList.add(eState.image);
    }
  )*
  "}"
  {
    String cId = UtilsParser.getContractIdFromMethod(cID.image);
    Contract c = a.getContractById(cId);
	c.addEndState(iState.image);
    c.addEndStates(stateList);
  }
}